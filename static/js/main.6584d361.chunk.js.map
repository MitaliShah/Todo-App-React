{"version":3,"sources":["components/ToDoItem.js","todosData.js","App.js","index.js"],"names":["ToDoItem","props","react_default","a","createElement","className","type","checked","item","completed","onChange","handleChange","id","style","fontStyle","color","textDecoration","text","todosData","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","bind","assertThisInitialized","setState","prevState","map","todo","console","log","_this2","todoItems","components_ToDoItem","key","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"mMAuBeA,MAjBf,SAAkBC,GAQd,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,QAASN,EAAMO,KAAKC,UAAWC,SAAU,kBAAKT,EAAMU,aAAaV,EAAMO,KAAKI,OACnGV,EAAAC,EAAAC,cAAA,KAAGS,MAAOZ,EAAMO,KAAKC,UATF,CACnBK,UAAW,SACXC,MAAO,UACPC,eAAgB,gBAMkC,MAAOf,EAAMO,KAAKS,QCW7DC,EA5BG,CACd,CACIN,GAAI,EACJK,KAAM,qBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,WACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mCACNR,WAAW,IC4CJU,cAxCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,MAAOV,GAEXE,EAAKT,aAAeS,EAAKT,aAAakB,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IALXA,4EAQAR,GAETW,KAAKQ,SAAS,SAAAC,GAOV,MAAO,CACHJ,MAPiBI,EAAUJ,MAAMK,IAAI,SAAAC,GAIrC,OAHGA,EAAKtB,KAAOA,IACXsB,EAAKzB,WAAayB,EAAKzB,WAEpByB,OASfC,QAAQC,IAAI,WAAYxB,oCAIpB,IAAAyB,EAAAd,KACEe,EAAYf,KAAKI,MAAMC,MAAMK,IAAI,SAAAzB,GAAI,OAAIN,EAAAC,EAAAC,cAACmC,EAAD,CAAUC,IAAKhC,EAAKI,GAAKJ,KAAMA,EAAMG,aAAc0B,EAAK1B,iBAEnG,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdiC,UAnCCG,IAAMC,iBCdxBC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAAQC,SAASC,eAAe","file":"static/js/main.6584d361.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n/**\r\n * Challenge: Style the completed todo items differently from the incomplete items.\r\n */\r\n\r\nfunction ToDoItem(props){\r\n\r\n    const completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n\r\n    return(\r\n    <div className=\"todo-item\">\r\n        <input type=\"checkbox\" checked={props.item.completed} onChange={()=> props.handleChange(props.item.id)}/>\r\n        <p style={props.item.completed ? completedStyle : null}>{props.item.text}</p>\r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ToDoItem","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React from 'react'\r\nimport ToDoItem from './components/ToDoItem'\r\nimport todosData from './todosData'\r\n\r\n/*\r\nIn the previous iteration of this todo list app, we pulled in todos data from a JSON file and mapped over it to display the todo items.\r\n\r\nEventually we'll want to be able to modify the data, which will only happen if we've \"loaded\" the data in to the component's state\r\n\r\nChallenge: Change the <App /> component into a stateful class component and load the imported `todosData` into state.\r\n*/\r\n\r\n//TODO- Phase 6 \r\n\r\n/**\r\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\r\n * This challenge is a little more involved than some of the past ones. Check the comments \r\n * in the code for some help on accomplishing this one\r\n * \r\n * Challenge: \r\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\r\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\r\n * 2. Pass the method down to the TodoItem component\r\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\r\n */\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            todos: todosData\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }   \r\n\r\n    handleChange(id) {\r\n\r\n        this.setState(prevState =>  {\r\n            const updatedTodos = prevState.todos.map(todo => {\r\n                if(todo.id === id){\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo\r\n            })\r\n            return {\r\n                todos: updatedTodos\r\n            }\r\n        })\r\n\r\n        // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\r\n        // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)\r\n        console.log(\"Changed!\", id)\r\n    }\r\n\r\n\r\n    render(){\r\n        const todoItems = this.state.todos.map(item => <ToDoItem key={item.id}  item={item} handleChange={this.handleChange}/>)\r\n\r\n            return(\r\n                <div className=\"todo-list\">\r\n                {todoItems}\r\n                </div>\r\n            )\r\n    }\r\n    \r\n}\r\n\r\nexport default App","// From scratch, initialize the React app\r\n// Render an <App /> component\r\n// Create the <App /> component from scratch\r\n// Have the <App /> component render 3 or 4 checkboxes with paragraphs or spans next to it\r\n// like you're making a todo list with some hard-coded items on it\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './style.css';\r\n\r\n\r\nReactDOM.render(<App />,document.getElementById(\"root\"))"],"sourceRoot":""}